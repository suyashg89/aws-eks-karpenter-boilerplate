---
aws_account_number: "<YOUR_AWS_ACCOUNT_NUMBER>"
region: "<YOUR_PREFERRED_AWS_REGION>" # example - eu-west-1
eks_infra_bucket: "<YOUR_CHOSEN_S3_BUCKET_NAME>" # example - eks-infrastructure
eks_cluster_name: "<YOUR_CHOSEN_EKS_CLUSTER_NAME>" # example - {{ env }}-cluster will make the name as sandbox-cluster if 'env' is set to sandbox
ec2_keypair_name: "<EC2_SSH_KEY_PAIR_FOR_WORKER_NODES>" # example - sandbox-admin
eks_node_ami_id: "<EKS_OPTIMIZED_WORKER_NODE_AMI_ID>" # example - ami-06efe6b9d402e8674

cf_stack_names:
  s3_bucket_stack_name: "{{ env }}-s3"
  vpc_stack_name: "{{ env }}-vpc"
  eks_iam_stack_name: "{{ env }}-eks-iam"
  eks_control_plane_stack_name: "{{ env }}-eks-control-plane"
  eks_starters_nodegroup_stack_name: "{{ env }}-eks-starters-worker-nodegroup"
  eks_addons_stack_name: "{{ env }}-eks-addons"
  eks_karpenter_prereqs_stack_name: "{{ env }}-eks-karpenter-prereqs"

lambda_parameters:
  configureEksControlPlane:
    description: "Config EKS cluster Control plane"
    handler: "configure_eks_control_plane.lambda_handler"
    lambda_timeout: 900
    runtime: python3.7
    lambda_params:
      LOG_LEVEL: "INFO"
  configureEksOidcProvider:
    description: "Configure EKS OIDC provider"
    handler: "configure_eks_oidc_provider.lambda_handler"
    lambda_timeout: 60
    runtime: python3.7
    lambda_params:
      LOG_LEVEL: "INFO"
  getEksOidcUrl:
    description: "Get EKS OIDC URL"
    handler: "get_eks_oidc_url.lambda_handler"
    lambda_timeout: 30
    runtime: python3.7
    lambda_params:
      LOG_LEVEL: "INFO"
  
bucket_parameters:
  cf_params:
    BucketName: "{{ eks_infra_bucket }}"
    EnableVersioning: Enabled
    EnableEncryption: "true"
    BlockPublicAcls: false
    BlockPublicPolicy: false
    IgnorePublicAcls: false
    RestrictPublicBuckets: false

vpc_parameters:
  cf_params:
    EksClusterName: "{{ eks_cluster_name }}"
    Environment: "{{ env }}"
    AvailabilityZones: "{{ region }}a,{{ region }}b"
    VpcPrimaryCidr: "10.8.0.0/22"
    PublicSubnet1Cidr: "10.8.0.0/26"
    PublicSubnet2Cidr: "10.8.0.64/26"
    WebSubnet1Cidr: "10.8.1.0/25"
    WebSubnet2Cidr: "10.8.1.128/25"
    AppSubnet1Cidr: "10.8.2.0/24"
    AppSubnet2Cidr: "10.8.3.0/24"
    DbSubnet1Cidr: "10.8.0.128/26"
    DbSubnet2Cidr: "10.8.0.192/26"
    VpcTenancy: "default"

eks_iam_parameters:
  cf_params:
    Environment: "{{ env }}"

eks_control_plane_parameters:
  cf_params:
    Environment: "{{ env }}"
    EksClusterName: "{{ eks_cluster_name }}"
    VpcStackName: "{{ cf_stack_names.vpc_stack_name }}"
    IamStackName: "{{ cf_stack_names.eks_iam_stack_name }}"
    KubernetesVersion: "1.22"
    EndpointPublicAccess: "True"
    ClusterLoggingTypes: "api, audit, authenticator, controllerManager, scheduler"

eks_addons_parameters:
  cf_params:
    EksClusterName: "{{ eks_cluster_name }}"
    Environment: "{{ env }}"
    VpcCniAddonVersion: "v1.12.6-eksbuild.2"
    CoreDnsAddonVersion: "v1.8.7-eksbuild.4"
    KubeProxyAddonVersion: "v1.22.17-eksbuild.2"
    ResolveConflicts: "OVERWRITE"

eks_starters_worker_nodegroup_parameters:
  cf_params:
    Environment: "{{ env }}"
    VpcStackName: "{{ cf_stack_names.vpc_stack_name }}"
    IamStackName: "{{ cf_stack_names.eks_iam_stack_name }}"
    EksControlPlaneStackName: "{{ cf_stack_names.eks_control_plane_stack_name }}"
    EksClusterName: "{{ eks_cluster_name }}"
    NodeImageId: "{{ eks_node_ami_id }}"
    NodeAutoScalingGroupMinSize: "1"
    NodeAutoScalingGroupMaxSize: "2"
    NodeInstanceType: "m5.large"
    NodeVolumeSize: "50"
    KeyName: "{{ ec2_keypair_name }}"
    HttpPutResponseHopLimit: "1"
    DisableIMDSv1: "true"
    RollingUpdateSleepTime: 300

eks_karpenter_parameters:
  cf_params:
    Environment: "{{ env }}"
    EksControlPlaneStackName: "{{ cf_stack_names.eks_control_plane_stack_name }}"
    EksClusterName: "{{ eks_cluster_name }}"
    LaunchTemplateName: "{{ env }}-eks-karpenter-worker-node-template"
    NodeImageId: "{{ eks_node_ami_id }}"
    NodeVolumeSize: "50"
    KeyName: "{{ ec2_keypair_name }}"
    HttpPutResponseHopLimit: "1"
    DisableIMDSv1: "true"
  karpenter_helm_charts_version: v0.10.0
  provisioners:
    - name: "general-purpose"
      ec2_instance_type: "'m5.xlarge', 'm5.2xlarge', 'm5.4xlarge'"
      zone: "'{{ region }}a', '{{ region }}b'"
      arch: "'amd64'"
      capacity_type: "'on-demand'"
      labels:
        team: team-a
      ttlSecondsAfterEmpty: 30
