AWSTemplateFormatVersion: "2010-09-09"
Description: "CF stack to create Amazon EKS Control Plane, its security group and worker-node security group."
Parameters:
  Environment:
    Type: String
    Default: ""
  VpcStackName:
    Type: String
    Default: ""
  IamStackName:
    Type: String
    Default: ""
  KubernetesVersion:
    Type: String
    Default: "1.22"
  EksEncryptSecrets:
    Type: String
    AllowedValues: [Enabled, Disabled]
    Default: Enabled
  EksEncryptSecretsKmsKeyArn:
    Type: String
    Default: ""
  IamOidcProvider:
    Type: String
    AllowedValues: [ "Enabled", "Disabled" ]
    Default: "Enabled"
  EksClusterName:
    Type: String
  EndpointPublicAccess:
    Type: String
    Description: Set the value to True to enable API Server public access. Template disables it by default.
    AllowedValues:
      - 'True'
      - 'False'
    Default: 'True'
  EndpointPrivateAccess:
    Type: String
    Description: Set the value to True to enable API Server private access. Template enables it by default.
    AllowedValues:
      - 'True'
      - 'False'
    Default: 'True'
  PublicAccessCidrs:
    Type: CommaDelimitedList
    Description: List of CIDR blocks that are allowed access to cluster's public API server endpoint.
    Default: '0.0.0.0/0'
  ClusterLoggingTypes:
    Type: CommaDelimitedList
    Description: Allowed values are - api, audit, authenticator, controllerManager, scheduler
    Default: 'api, audit, authenticator, controllerManager, scheduler'
Conditions:
  CreateKey: !And
    - !Equals [ !Ref EksEncryptSecretsKmsKeyArn, "" ]
    - !Equals [ !Ref EksEncryptSecrets, Enabled ]
  EnableEncryption: !Equals [ !Ref EksEncryptSecrets, Enabled ]
  EnableIamOidcProvider: !Equals [!Ref 'IamOidcProvider', 'Enabled']
Resources:
  KmsKey:
    Condition: CreateKey
    Type: "AWS::KMS::Key"
    Properties:
      KeyPolicy: {
        "Version": "2012-10-17",
        "Id": "key-default-1",
        "Statement": [
          {
            "Sid": "Enable IAM User Permissions",
            "Effect": "Allow",
            "Principal": {
              "AWS": !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
            },
            "Action": "kms:*",
            "Resource": "*"
          }
        ]
      }
  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster communication
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-controlplane-security-group"
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackName}-VpcId"
  ControlPlaneSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow SG members to access k8s api
      GroupId: !Ref ControlPlaneSecurityGroup
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
  NodeSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Security group for all nodes in the cluster
      Tags:
        - Key: !Sub "kubernetes.io/cluster/${EksClusterName}"
          Value: owned
        - Key: Name
          Value: !Sub "${Environment}-node-security-group"
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackName}-VpcId"
  NodeSecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      Description: Allow node to communicate with each other
      FromPort: 0
      GroupId: !Ref NodeSecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      ToPort: 65535
  ClusterControlPlaneSecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      Description: Allow pods to communicate with the cluster API Server
      FromPort: 443
      GroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      ToPort: 443
  ControlPlaneEgressToNodeSecurityGroup:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      Description: Allow the cluster control plane to communicate with worker Kubelet and pods
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      FromPort: 1025
      GroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      ToPort: 65535
  ControlPlaneEgressToNodeSecurityGroupOn443:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      Description: Allow the cluster control plane to communicate with pods running extension API servers on port 443
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      FromPort: 443
      GroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      ToPort: 443
  NodeSecurityGroupFromControlPlaneIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
      FromPort: 1025
      GroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      ToPort: 65535
  NodeSecurityGroupFromControlPlaneOn443Ingress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      Description: Allow pods running extension API servers on port 443 to receive communication from cluster control plane
      FromPort: 443
      GroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      ToPort: 443
  NodeSecurityGroupFromAppSubnet1Ingress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      Description: Allow worker Kubelets and pods to receive communication from the Appsubnet1
      FromPort: 0
      ToPort: 65535
      GroupId: !Ref NodeSecurityGroup
      CidrIp:
        Fn::ImportValue: !Sub "${VpcStackName}-AppSubnet1Cidr"
      IpProtocol: tcp
  NodeSecurityGroupFromAppSubnet2Ingress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      Description: Allow worker Kubelets and pods to receive communication from the Appsubnet2
      FromPort: 0
      ToPort: 65535
      GroupId: !Ref NodeSecurityGroup
      CidrIp:
        Fn::ImportValue: !Sub "${VpcStackName}-AppSubnet2Cidr"
      IpProtocol: tcp
  Eks:
    Type: "AWS::EKS::Cluster"
    Properties:
      Name: !Ref EksClusterName
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !GetAtt ControlPlaneSecurityGroup.GroupId
        SubnetIds:
          - Fn::ImportValue: !Sub "${VpcStackName}-AppSubnet1Id"
          - Fn::ImportValue: !Sub "${VpcStackName}-AppSubnet2Id"
          - Fn::ImportValue: !Sub "${VpcStackName}-PublicSubnet1Id"
          - Fn::ImportValue: !Sub "${VpcStackName}-PublicSubnet2Id"
      EncryptionConfig: !If
        - EnableEncryption
        - - Resources: [ secrets ]
            Provider:
              KeyArn: !If [ CreateKey, !GetAtt KmsKey.Arn, !Ref EksEncryptSecretsKmsKeyArn ]
        - !Ref AWS::NoValue
      RoleArn:
        Fn::ImportValue: !Sub "${IamStackName}-ControlPlaneRoleArn"
      Version: !Ref KubernetesVersion
  ClusterOidcUrl:
      Type: Custom::ClusterOIDCUrl
      DependsOn: Eks
      Properties:
        ServiceToken: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:getEksOidcUrl"
        cluster_name:
          Ref: EksClusterName
  ClusterOidcProvider:
    Condition: EnableIamOidcProvider
    Type: Custom::ClusterOIDCProvider
    DependsOn: Eks
    Properties:
      ServiceToken: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:configureEksOidcProvider"
      OIDCIssuerURL: !Join ["", [ "https://", !GetAtt ClusterOidcUrl.oidc ]]
  ConfigureControlPlaneLogging:
    Type: Custom::ConfigureControlPlane
    DependsOn: Eks
    Properties:
      ServiceToken: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:configureEksControlPlane"
      clusterName: !Ref EksClusterName
      clusterLoggingTypes: !Ref ClusterLoggingTypes
      clusterUpdateType: 'LoggingUpdate'
  ConfigureApiServerAccess:
    Type: Custom::ConfigureControlPlane
    DependsOn: ConfigureControlPlaneLogging #Add the dependency on 'ConfigureControlPlaneLogging' to avoid updating Control Plane's API Server access and logging config at the same time.
    Properties:
      ServiceToken: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:configureEksControlPlane"
      clusterName: !Ref EksClusterName
      endpointPublicAccess: !Ref EndpointPublicAccess
      endpointPrivateAccess: !Ref EndpointPrivateAccess
      clusterUpdateType: 'EndpointAccessUpdate'
      publicAccessCidrs: !Ref PublicAccessCidrs
Outputs:
  EksArn:
    Value: !GetAtt Eks.Arn
    Export:
      Name: !Sub "${AWS::StackName}-EksArn"
  CaData:
    Value: !GetAtt Eks.CertificateAuthorityData
  EksEndpoint:
    Value: !GetAtt Eks.Endpoint
    Export:
      Name: !Sub "${AWS::StackName}-EksEndpoint"
  OidcIssuerUrl:
    Value: !GetAtt ClusterOidcUrl.oidc
    Export:
      Name: !Sub "${AWS::StackName}-OidcIssuerUrl"
  EksName:
    Value: !Ref Eks
    Export:
      Name: !Sub "${AWS::StackName}-EksName"
  ControlPlaneSecurityGroup:
    Description: The security group for the Amazon EKS control plane.
    Value: !Ref ControlPlaneSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-ControlPlaneSecurityGroup"
  NodeSecurityGroup:
    Description: The security group to be used by worker nodes, EFS filesystem and ENI config for custom CNI networking.
    Value: !Ref NodeSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-NodeSecurityGroup"
